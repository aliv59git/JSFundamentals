II. Лекция 

Записки по лекция 2 JavaScript1_Fundamentals Лектор - Ники

Типове данни и променливи. 

1 променлива може да е глобална за целия скоуп. 

Парче памет, на което даваме име - това е променливата.  Самата променлива е dynamic - 

тип данни - характеристика на стойностите с които работим . Начина, по който ще бъдат запазени в паметта. Дефинира операциите с които можем да работим с тези данни. 

JS е нетипизиран език. Винаги декларирането на променливата да е с var  отпред. !!! ако се пропусне става глобална променлива. 

тук не разделяме int long и т.н.    +- 10^15*9

var a=5, b=3;     //по-препоръчително е така. Тъй като след това се минифицират. 

В браузъра отваря конзолата и показва сметки с максималната стойност. 

Тук и целите и дробните числа са си просто числа. При дробните си работи нормално/почти/

При floating-point числа се държат по различен начин в различни браузъри и различни операционни системи. 

Променливата след for-цикъла остава и след нея. ??? Тук е по-особено. 

По-добре е с 32 битови числа да работим. Тук зависи от опера.ционната система. 

Math.PI   Math.E   И тук както в С# имаме константи и функции flour - закръгля надолу round - нагоре. Имаме и  random число между 0 и 1;

var c = .5   // 0.5 дава. 

NaN == NaN  //false

isNaN(NaN)  //true

typeof()  - подобен в C# 

typeof([]) //object  

0.1+0.2 ==0.3 //false  

IEEE-754 стандарт се използва в JS. 

Прилагането на оператора |0 дава закръгляне към цяло число надолу. 

(value+0.5) |0  закръгля правилно. 

http://jsperf.com   - дава скоростта на операциите /този сайт. 

Конвертиране на стриг към инт   str | 0;    -  str | 0 +1  прибавя 1 към числото вече като инт. 

parseInt( )

num.toString(2)  -> 1100  прави го в двоична

Булевите променливи - ако нещо е истина - изпълняваме някакъв код. 

1 - се интерпретира като true; 

console.log()

Продължение на лекцията 

String Type

Символния низ е непроменяем. Т.е. както и в C#  Препоръчват се ' '  "

Много често се налага да имаме променливи в които част от низа е таг, html  в които кавичките са "". 

+ конкатениране на символни низове.   '\'' - ескейпване на кавичката.  Ако другите кавички са същите. Иначе не е необходимо ескейпване. 

[]  декларира масив

{} декларира обект.  в 

unicode - има символи от различни езици - арабски, китайски и т.т..н.н. 

isNaN("123") проверява дали е символен низ

!isNaN("asdf") //true

Символните низове не се променят. При конкатениране получаваме нов символен низ със същата променлива. 

При JS е оптимизирано  събирането на символни низове. Отзад работи със StringBuilder. Тук събирането работи бързо!

parseInt()  parseFloat(); Работи с . като разделител независимо от настройката в Windows-a. 

Има няколко начина на конвертиране на символния низ към число. В презентацията. 

undefined - означава че променливата все още няма стойност. 

null - означава че има такава променлива, но има стойност null  т.е. не сочи никъде . Когато искаме да зачистим памет, тогава x = null; Тази памет се освобождава. 

Все още няма константи. Но ако нещо го пишем като константа, да е с главни букви. "Иначе camelCase Ако е име на клас PascalCase

Ако е пропуснато var променливата е глобална и може да се вижда отвън!!!! Лошо!!!

{ - отварящата скобка да е на горния ред!!!! Важно!!!!!

Има значение дали са малки и големи букви на променливите. 

При for цикъл  остава стойността на i последната - и тя е видима.  



Втора лекция Ники 21.05.2015 г. Оператори и изрази

Ternary (? : ) 
 
~

Когато операторите са с еднакъв приоритет - изпълняват се отляво надясно.

Като в C# са  

==  === сравнява дали са от еднакъв тип и дали са с еднаква стойност. за разлика от ==.  Има и !== 

Други оператори   .  []  ()  ?:   new    in            ->   Като в C# са
 
in - Проверява "има ли го"  /true  /false.

Деленията по условие са дробни. 

5 %3 = 2    ->   Като в C# са

Операторите ++ и --  внимание!  Може да се ползват във for loop. Иначе не е желателно!!!

когато имаме "2"+1 = 21;

но "2" - 1 = 1;   "2" -0      "2"  |0   превръща ги в число. 

Логическите оператори      ->   Като в C# са

{} true  празният обект е true
Същото []  

var a = 123;

a.toString(2)

a.toString(13)

a.toString(16) 

Прави ги в съответните бройни системи. !!!

typeof() типа дава. 

Да внимаваме при събирането с дробни числа. 

=== - да използзваме този оператор за  сравняване 






		































